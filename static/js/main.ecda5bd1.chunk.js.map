{"version":3,"sources":["logo.svg","components/Landing.jsx","components/About.jsx","components/Projects.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","handleClick","Container","Grid","columns","stackable","textAlign","Row","verticalAlign","Column","Header","icon","onClick","Icon","name","About","Projects","divided","stretched","Segment","Image","src","href","size","App","useState","undefined","renderedComponent","setRenderedComponent","e","target","classList","value","innerText","fluid","as","id","link","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,wJCsC5BC,EA1BC,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAEjB,OACE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,QAAS,EAAGC,WAAS,EAACC,UAAU,UAEpC,kBAACH,EAAA,EAAKI,IAAN,CAAUC,cAAc,UACtB,kBAACL,EAAA,EAAKM,OAAN,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAI,EAACC,QAAUX,GACrB,kBAACY,EAAA,EAAD,CAAMC,KAAK,gBADb,UAMF,kBAACX,EAAA,EAAKM,OAAN,CAAaG,QAAUX,GACrB,kBAACS,EAAA,EAAD,CAAQC,MAAI,GACV,kBAACE,EAAA,EAAD,CAAMC,KAAK,YADb,iBCfCC,EATD,SAAC,GAAqB,IAAnBd,EAAkB,EAAlBA,YAEf,OACE,kBAACC,EAAA,EAAD,KACE,uBAAGU,QAAUX,GAAb,U,kBC0BSe,EA9BE,SAAC,GAAqB,IAAnBf,EAAkB,EAAlBA,YAElB,OACE,kBAACC,EAAA,EAAD,KACE,uBAAGU,QAAUX,GAAb,QAEA,kBAACE,EAAA,EAAD,CAAMC,QAAS,EAAGa,SAAO,GACvB,kBAACd,EAAA,EAAKI,IAAN,CAAUW,WAAS,GACjB,kBAACf,EAAA,EAAKM,OAAN,KACE,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,gBACX,yNAGJ,kBAAClB,EAAA,EAAKM,OAAN,KACE,kBAACU,EAAA,EAAD,KACE,uBAAGG,KAAK,IAAG,kBAACF,EAAA,EAAD,CAAOC,IAAI,iCAAiCE,KAAK,YAC5D,sKAEF,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,+BAA+BE,KAAK,WAC/C,2J,cC6BCC,MA7Cf,WAAe,MAEqCC,wBAASC,GAF9C,mBAENC,EAFM,KAEaC,EAFb,KAIP3B,EAAc,SAAC4B,GAEfA,EAAEC,OAAOC,UAAUC,MACY,qBAA7BH,EAAEC,OAAOC,UAAUC,MACrBJ,EAAqB,SACiB,iBAA7BC,EAAEC,OAAOC,UAAUC,OAC5BJ,EAAqB,YAGvBA,EAAqBC,EAAEC,OAAOG,YAelC,OACE,oCACE,kBAAC/B,EAAA,EAAD,CAAWgC,OAAK,GACd,kBAACxB,EAAA,EAAD,CAAQyB,GAAG,KAAKC,GAAG,OAAnB,6BACA,kBAAC1B,EAAA,EAAD,CAAQyB,GAAG,KAAKC,GAAG,QAAnB,mCACE,kBAACvB,EAAA,EAAD,CAAMwB,MAAI,EAACvB,KAAK,aAChB,kBAACD,EAAA,EAAD,CAAMwB,MAAI,EAACvB,KAAK,WAChB,kBAACD,EAAA,EAAD,CAAMwB,MAAI,EAACvB,KAAK,eAlBT,WACb,OAAQa,GACN,IAAK,QACH,OAAO,kBAAC,EAAD,CAAO1B,YAAcA,IAC9B,IAAK,WACH,OAAO,kBAAC,EAAD,CAAUA,YAAcA,IACjC,QACE,OAAO,kBAAC,EAAD,CAASA,YAAcA,KAe9BqC,KCnCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ecda5bd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {\n  Container,\n  Button,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Search,\n  Segment,\n} from 'semantic-ui-react';\n\nconst Landing = ({ handleClick }) => {\n\n  return(\n    <Container>\n        <Grid columns={2} stackable textAlign='center'>\n\n          <Grid.Row verticalAlign='middle'>\n            <Grid.Column>\n              <Header icon onClick={ handleClick }>\n                <Icon name='user secret' />\n                About\n              </Header>\n            </Grid.Column>\n\n            <Grid.Column onClick={ handleClick }>\n              <Header icon>\n                <Icon name='archive' />\n                Projects\n              </Header>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n    </Container>\n  )\n};\n\nexport default Landing;\n","import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\nconst About = ({ handleClick }) => {\n\n  return(\n    <Container>\n      <p onClick={ handleClick }>back</p>\n    </Container>\n  )\n};\n\nexport default About;\n","import React from 'react';\nimport { Container, Grid, Segment, Image } from 'semantic-ui-react';\n\nconst Projects = ({ handleClick }) => {\n\n  return(\n    <Container>\n      <p onClick={ handleClick }>back</p>\n\n      <Grid columns={2} divided>\n        <Grid.Row stretched>\n          <Grid.Column>\n            <Segment>\n              <Image src='/subway.png' />\n              <p>A real-time train arrival tracker Progressive Web App. Written in React.js with Redux functionality and a custom Rails API backend that includes data from the MTA's Real-Time Data API.</p>\n            </Segment>\n          </Grid.Column>\n          <Grid.Column>\n            <Segment>\n              <a href=''><Image src='/FlickPixScreenShot_edited.jpg' size=\"medium\"/></a>\n              <p>A random movie generator web app written in React.js with a custom Rails API backend that gets movie data from The Movie Database API.</p>\n            </Segment>\n            <Segment>\n              <Image src='/SonataScreenShot_edited.jpg' size=\"medium\"/>\n              <p>A music player web app that has playlist functionality. Written in vanilla Javascript with a custom Rails API backend.</p>\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  )\n};\n\nexport default Projects;\n","import React, { useState } from 'react';\nimport Landing from './components/Landing';\nimport About from './components/About';\nimport Projects from './components/Projects';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Container, Header, Icon } from 'semantic-ui-react';\n\nfunction App() {\n  // usestate to render diff components\n  const [renderedComponent, setRenderedComponent] = useState(undefined)\n\n  const handleClick = (e) => {\n\n    if (e.target.classList.value) {\n      if (e.target.classList.value === 'user secret icon') {\n        setRenderedComponent('About')\n      } else if (e.target.classList.value === 'archive icon') {\n        setRenderedComponent('Projects')\n      }\n    } else {\n      setRenderedComponent(e.target.innerText)\n    }\n  }\n\n  const render = () => {\n    switch (renderedComponent) {\n      case 'About':\n        return <About handleClick={ handleClick }/>\n      case 'Projects':\n        return <Projects handleClick={ handleClick }/>\n      default:\n        return <Landing handleClick={ handleClick }/>\n    }\n  }\n\n  return (\n    <>\n      <Container fluid>\n        <Header as='h1' id='top'>Hi, I'm Lori \"Lei\" Boyd!</Header>\n        <Header as='h2' id='top2'>Welcome to my creation station!</Header>\n          <Icon link name='linkedin' />\n          <Icon link name='github' />\n          <Icon link name='blogger b' />\n      </Container>\n\n      {\n        render()\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}